/*******************************************************************************
This SQL script is part of the physical design of my DBS project:
"Pharmaceutical Company" for Milestone 3.
This code CREATES the TABLES, SEQUENCES, TRIGGERS and STORED PROCEDURES for 
the database.

-- ----------------------- CREATE STATEMENTS ------------------------------------

Clemens Wager, 01635477
University of Vienna
VU Database Systems
SS2021

*******************************************************************************/

-- ------------------------------------------------------------------------------
-- CREATE TABLES
-- ------------------------------------------------------------------------------
CREATE TABLE Client(
    ID_client          NUMBER(5),
    Client_Name        VARCHAR(50) NOT NULL,
    Country_Name       VARCHAR(25) NOT NULL, -- FK
    CONSTRAINT PK_client PRIMARY KEY (ID_client)
);


CREATE TABLE Product(
    ID_product          NUMBER(5),
    Product_Name        VARCHAR(50) UNIQUE NOT NULL,
    Price               NUMBER(8,2) NOT NULL,
    Indication          VARCHAR(40) NOT NULL, 
    CONSTRAINT PK_product PRIMARY KEY (ID_product)
);


CREATE TABLE Orders(
    ID_Orders          INTEGER GENERATED BY DEFAULT AS IDENTITY
                       (START WITH 1 INCREMENT BY 1), -- simple auto-increment
    ID_Product         NUMBER(5) NOT NULL, --FK
    ID_Client          NUMBER(5) NOT NULL, --FK
    Order_Date         DATE      NOT NULL, 
    Quantity           NUMBER(6) NOT NULL,
    CONSTRAINT PK_orders PRIMARY KEY (ID_orders),
    CONSTRAINT quantity_range_check CHECK(Quantity >= 10 AND Quantity <= 9999)
);


CREATE TABLE Campaign(
    ID_Product          NUMBER(5) NOT NULL, --FK
    Campaign_Name       VARCHAR(40) NOT NULL, -- not UNIQUE because weak entity
    Start_date          DATE NOT NULL,
    End_date            DATE NOT NULL,
    CONSTRAINT PK_campaign PRIMARY KEY (ID_product, Campaign_Name),
    CONSTRAINT camp_date CHECK(Start_date < End_date) -- CHECK CONSTRAINT
);


CREATE TABLE Employee(
    ID_employee         INTEGER GENERATED BY DEFAULT AS IDENTITY
                        (START WITH 1 INCREMENT BY 1),  -- simple auto-increment
    Firstname           VARCHAR(25) CONSTRAINT emp_firstname_not_null NOT NULL,
    Lastname            VARCHAR(25) CONSTRAINT emp_lastname_not_null NOT NULL,
    Gender              VARCHAR(1)  CONSTRAINT emp_gender_not_null NOT NULL,
    Salary              NUMBER(8,2) DEFAULT 1500,
    Team_leader         NUMBER(5), --FK
    Hire_date           DATE CONSTRAINT emp_hiredate_not_null NOT NULL, 
    CONSTRAINT PK_emp PRIMARY KEY (ID_employee),
    CONSTRAINT emp_gender CHECK(Gender IN ('F','M','D')) -- CHECK CONSTRAINT
);


CREATE TABLE Marketing_emp(
    ID_employee     INTEGER, --FK
    Occupation      VARCHAR(50),
    CONSTRAINT PK_mark PRIMARY KEY (ID_employee)
);


CREATE TABLE Advertises(
    ID_employee         INTEGER, --FK
    ID_product          NUMBER(5), --FK
    CONSTRAINT PK_adv PRIMARY KEY (ID_employee, ID_product)
);


CREATE TABLE General_Manager(
    ID_employee         INTEGER, --FK
    ID_region           NUMBER(2) UNIQUE NOT NULL, --FK 
    CONSTRAINT PK_GM PRIMARY KEY (ID_employee)
);


CREATE TABLE Region(
    ID_region           NUMBER(2) GENERATED ALWAYS AS IDENTITY 
                        MINVALUE 1 
                        INCREMENT BY 1 START WITH 1,  -- auto-increment
    Region_Name         VARCHAR(25) UNIQUE NOT NULL,
    CONSTRAINT PK_region PRIMARY KEY (ID_region)
);


CREATE TABLE Country(
    Country_Name        VARCHAR(25) NOT NULL, --PK
    ID_region           NUMBER(2) NOT NULL,  --FK
    CONSTRAINT PK_country PRIMARY KEY (Country_Name)
);


-- ------------------------------------------------------------------------------
-- ADD CONSTRAINTS
-- ------------------------------------------------------------------------------

-- Foreign keys
-- ------------------------------------------------------------------------------
ALTER TABLE Client
    ADD CONSTRAINT FK_client_country
    FOREIGN KEY (Country_Name) -- referencing table
    REFERENCES Country (Country_Name) -- referenced table
    ON DELETE CASCADE -- integrity
;

ALTER TABLE Orders                      
    ADD CONSTRAINT FK_orders_product   FOREIGN KEY (ID_product)
    REFERENCES Product (ID_product) ON DELETE CASCADE
;

ALTER TABLE Orders                      
    ADD CONSTRAINT FK_orders_client FOREIGN KEY (ID_client)
    REFERENCES Client (ID_client) ON DELETE CASCADE
;

ALTER TABLE Campaign                      
    ADD CONSTRAINT FK_camp_product FOREIGN KEY (ID_product)
    REFERENCES Product (ID_product) ON DELETE CASCADE
;
-- Team_leader ID
ALTER TABLE Employee                      
    ADD CONSTRAINT FK_emp_leader FOREIGN KEY (Team_leader)
    REFERENCES Employee (ID_employee) ON DELETE CASCADE
;

ALTER TABLE Marketing_emp                      
    ADD CONSTRAINT FK_mark_emp FOREIGN KEY (ID_employee)
    REFERENCES Employee (ID_employee) ON DELETE CASCADE
;

ALTER TABLE Advertises                    
    ADD CONSTRAINT FK_adv_prod FOREIGN KEY (ID_product)
    REFERENCES Product (ID_product) ON DELETE CASCADE
;

ALTER TABLE Advertises                     
    ADD CONSTRAINT FK_adv_mark FOREIGN KEY (ID_employee)
    REFERENCES Marketing_emp (ID_employee) ON DELETE CASCADE
;

ALTER TABLE General_Manager                      
    ADD CONSTRAINT FK_gm_emp FOREIGN KEY (ID_employee)
    REFERENCES Employee (ID_employee) ON DELETE CASCADE
;

ALTER TABLE General_Manager                      
    ADD CONSTRAINT FK_gm_prod FOREIGN KEY (ID_region)
    REFERENCES Region (ID_region) ON DELETE CASCADE
;

ALTER TABLE Country                 
    ADD CONSTRAINT FK_country_reg FOREIGN KEY (ID_region)
    REFERENCES Region (ID_region) ON DELETE CASCADE
;




-- TWO AUTO ICREMENTS
-- ------------------------------------------------------------------------------
-- 1) TABLE ID_Region, ID_Orders and ID_Employee are auto-incremented above

-- 2) ID_Clinet is auto-incremented for TABLE Client below:
-- Create sequence that generates ID numbers for TABLE Client
CREATE SEQUENCE client_seq
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    CACHE 20; -- for performance

-- Create trigger that inserts a fresh ID when new Client row is inserted
CREATE OR REPLACE TRIGGER client_trigger
    BEFORE INSERT ON Client
    FOR EACH ROW DECLARE ID_client number;
BEGIN
    SELECT client_seq.NEXTVAL
    INTO : NEW.ID_client
    FROM dual;
END;
/




-- ------------------------------------------------------------------------------
-- STORED PROCEDURES
-- ------------------------------------------------------------------------------

-- --------------------------
-- DELETE CLIENT WITH SP
-- --------------------------
-- SP to delete a Client from the database 
CREATE OR REPLACE PROCEDURE p_delete_client
    (
    del_id_client IN client.ID_Client%TYPE, -- parameter 1
    p_errorcode OUT NUMBER -- parameter 2
    )
    AS BEGIN
        DELETE FROM Client -- operation
        WHERE del_id_client = ID_Client
        ;
        p_errorcode := SQL%ROWCOUNT;
    EXCEPTION
        WHEN OTHERS
    THEN
      p_errorcode := SQLCODE;
  END p_delete_client;
/ 


-- --------------------------
-- UPDATE CLIENT WITH SP
-- --------------------------
-- SP to update a Client in the database 
CREATE OR REPLACE PROCEDURE p_update_client
    (
    up_id_client IN Client.ID_Client%TYPE, -- parameter 1
    up_client_name IN Client.Client_Name%TYPE, -- parameter 2
    up_client_country IN Client.Country_Name%TYPE, -- parameter 3
    p_errorcode OUT NUMBER -- parameter 4
    )
    AS BEGIN
        UPDATE Client -- operation
        SET 
            Client_Name = up_client_name,
            Country_Name = up_client_country
        WHERE ID_Client = up_id_client
        ;
        p_errorcode := SQL%ROWCOUNT;
    EXCEPTION
        WHEN OTHERS
    THEN
      p_errorcode := SQLCODE;
  END p_update_client;
/ 



-- --------------------------
-- DELETE EMPLOYEE WITH SP
-- --------------------------
-- SP to delete an Employee from the database 
CREATE OR REPLACE PROCEDURE p_delete_employee
    (
    del_id_employee IN employee.id_employee%TYPE, -- parameter 1
    p_errorcode OUT NUMBER -- parameter 2
    )
    AS BEGIN
        DELETE FROM Employee -- operation
        WHERE del_id_employee = id_employee
        ;
        p_errorcode := SQL%ROWCOUNT;
    EXCEPTION
        WHEN OTHERS
    THEN
      p_errorcode := SQLCODE;
  END p_delete_employee;
/ 


-- --------------------------
-- UPDATE EMPLOYEE WITH SP
-- --------------------------
-- SP to update an Employee in the database 
CREATE OR REPLACE PROCEDURE p_update_employee
    (
    up_id_employee IN employee.id_employee%TYPE, -- parameter 1
    up_firstname IN Employee.Firstname%TYPE, -- parameter 2
    up_lastname IN Employee.Lastname%TYPE, -- parameter 3
    up_gender IN employee.Gender%TYPE, -- parameter 4
    up_salary IN employee.Salary%TYPE, -- parameter 5
    up_team_leader IN employee.Team_leader%TYPE, -- parameter 6
    p_errorcode OUT NUMBER -- parameter 7
    )
    AS BEGIN
        UPDATE Employee -- operation
        SET 
            Firstname = up_firstname, 
            Lastname = up_lastname, 
            Gender = up_gender, 
            Salary = up_salary, 
            Team_leader = up_team_leader
            
        WHERE id_employee = up_id_employee
        ;
        p_errorcode := SQL%ROWCOUNT;
    EXCEPTION
        WHEN OTHERS
    THEN
      p_errorcode := SQLCODE;
  END p_update_employee;
/ 

-- -----------------------------------------------------------------------------
-- ---- CREATE VIEWS ------
-- -----------------------------------------------------------------------------

-- ---------------------------------
-- REVENUE VIEW (HELPER VIEW)
-- ---------------------------------
-- This is a helper view to access the revenue generated by each order
CREATE OR REPLACE VIEW revs AS
    SELECT  o.id_orders, p.id_product, p.price*o.quantity revenue
    FROM Orders o
        INNER JOIN Product p ON p.id_product = o.id_product
    GROUP BY o.id_orders, p.id_product, p.price*o.quantity
    ORDER BY o.ID_orders
;
SELECT * FROM revs;

-- ---------------------------------
-- REGION VIEW
-- ---------------------------------
-- The number of Country in each region and the assigned general manager
CREATE OR REPLACE VIEW countpreg AS
    SELECT r.ID_Region, r.Region_Name, COUNT(r.id_region) Count_country, 
           e.lastname, gm.ID_Employee
    FROM Region r
      INNER JOIN Country c ON c.ID_region = r.id_region
      INNER JOIN General_manager gm ON gm.id_region = r.id_region
      INNER JOIN Employee e ON e.id_employee = gm.id_employee
    GROUP BY r.Region_Name, r.ID_Region, e.lastname, gm.ID_Employee
    ORDER BY Count_country DESC
;
SELECT * FROM countpreg;
                
-- ---------------------------------
-- CLIENTS PER COUNTRY VIEW
-- ---------------------------------
-- The number of clients in each country
CREATE OR REPLACE VIEW clientpcount AS
    SELECT  COUNT(Client_Name) COUNT_CLIENT, Country_Name
    FROM Country
      NATURAL JOIN Client
    GROUP BY Country_Name
    ORDER BY COUNT_CLIENT DESC
;
SELECT * FROM clientpcount;

-- ---------------------------------
-- ORDERS VIEW
-- ---------------------------------
/* The view gathers all the important info from ORDERS 
and joins the helper VIEW revs to get access to the revenue */
CREATE OR REPLACE VIEW ord_rev AS
    SELECT o.ID_Orders, o.Order_date, o.ID_product, p.product_name, o.ID_client,
           o.Quantity, r.revenue 
    FROM Orders o
        INNER JOIN Product p
            ON o.id_product = p.id_product
        INNER JOIN revs r
            ON r.id_orders = o.id_orders
    GROUP BY o.ID_Orders, r.revenue, o.Order_date, o.ID_product, p.product_name, 
             o.ID_client, o.Quantity
    ORDER BY revenue DESC
;
SELECT * FROM ord_rev;

-- ---------------------------------
-- LONG CAMPAIGNS
-- ---------------------------------
-- This VIEW shows all Campaigns that lasted for more than one year
CREATE OR REPLACE VIEW camps AS
    SELECT c.id_product, c.campaign_name, c.start_date, c.end_date
    FROM Campaign c
    GROUP BY c.id_product, c.campaign_name, c.start_date, c.end_date
    HAVING add_months(c.start_date, 12) <  c.end_date
;
SELECT * FROM camps;

-- ---------------------------------
-- ADVERTISES VIEW
-- ---------------------------------
/* Lists Employee attributes of Marketing Employees with the 
according product they advertise*/
CREATE OR REPLACE VIEW Ads AS
    SELECT p.Product_name, e.Firstname, e.Lastname, e.ID_employee
    FROM Advertises a
    INNER JOIN Product p ON p.id_product = a.id_product
    INNER JOIN Employee e ON e.id_employee = a.id_employee
;
SELECT * FROM Ads;

-- ---------------------------------
-- KEY CLIENTS
-- ---------------------------------
-- Select the most important clients having more than 5 orders
CREATE OR REPLACE VIEW key_clients AS
    SELECT client_name, COUNT(id_client) cidc
    FROM ORDERS
    NATURAL JOIN Client
    HAVING COUNT(id_client) > 5
    GROUP BY client_name
    ORDER BY cidc DESC
;
SELECT * FROM key_clients;
