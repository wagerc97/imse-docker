from flask import Flask, redirect, url_for, session
from flask import render_template,request,redirect,url_for # For flask implementation
from pymongo import MongoClient # Database connector
import os
import mysql.connector as connector
import datetime
import csv
from errno import errorcode
import random

random.seed(42)



# ------------------#

AutoMigrate = False
if AutoMigrate: 
	print("[INFO] The data will be migrated.")
else: 
	print("[INFO] The data will not be migrated, pls do so in gui.")
# ------------------#


# -------------------- Connect Mongo------------------

attempt=0; retry = 3; again=True
while attempt < retry and again: 
	attempt +=1
	try: 
		clientDB = MongoClient("mongodb+srv://claas:Boltoft3@claas.zcf70nr.mongodb.net")	#Configure the connection to the database
		db = clientDB.camp2016	#Select the database
		todos = db.todo #Select the collection

		dbDrug = clientDB.MedStore   #Select the database
		order = dbDrug.order #Select the collection

	except Exception as e:
		print("[ERROR] Could not connect to NoSQL DB. " + str(e), end="")
		if attempt <= retry: 
			print("Try again to connect to NoSQL DB.")
	else: 
		again = False
		print("[INFO] Connection to NoSQL DB successful.")

# ------------------flask ------------------------------


app = Flask(__name__)
app.secret_key = b'sdgasgqrwsh'
title = "MedStore"
heading = "MedStore"
#modify=ObjectId()



# ----------------------connect mysql-----------------------


def creatDate(date):
		res = datetime.datetime.strptime(str(date), "%Y-%m-%d")
		return res

def drop_all_tables(conn):

	# Creating a cursor object using the cursor() method
	cursor = conn.cursor()
	
	DROPS={}


	DROPS['Orders'] = ("DROP TABLE IF EXISTS Orders CASCADE;")
	DROPS['Advertises'] = ("DROP TABLE IF EXISTS Advertises CASCADE;")
	DROPS['Marketing_emp'] = ("DROP TABLE IF EXISTS Marketing_emp CASCADE;")
	DROPS['General_Manager'] = ("DROP TABLE IF EXISTS General_Manager CASCADE;")
	DROPS['Campaign'] = ("DROP TABLE IF EXISTS Campaign CASCADE;")
	DROPS['Product'] = ("DROP TABLE IF EXISTS Product CASCADE;")
	DROPS['Employee'] = ("DROP TABLE IF EXISTS Employee CASCADE;")
	DROPS['Client'] = ("DROP TABLE IF EXISTS Client CASCADE;")
	DROPS['Country'] = ("DROP TABLE IF EXISTS Country CASCADE;")
	DROPS['Region'] = ("DROP TABLE IF EXISTS Region CASCADE;")


	for table_name in DROPS:
		table_description = DROPS[table_name]
		try:
			print("[INFO] Dropping table {}: ".format(table_name), end='')
			cursor.execute(table_description)
		except connector.Error as err:
			if err.errno == errorcode.ER_TABLESPACE_DISCARDED: # error of table does not exist anymore 
				print("[CAUTION] Table does not exists")
			else:
				print(err.msg)
		else:
			print("[INFO] OK, table dropped.")
		finally: 
			pass

def create_tables(cursor):
		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS Client(
				ID_client		  INTEGER AUTO_INCREMENT,
				Client_Name		VARCHAR(50) NOT NULL,
				Country_Name	   VARCHAR(25) NOT NULL, -- FK
				CONSTRAINT PK_client PRIMARY KEY (ID_client)
			);
			'''
		cursor.execute(sql)

		# Dropping table if already exists.
		#cursor.execute("DROP TABLE IF EXISTS Product")

		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS Product(
				ID_product		  INTEGER AUTO_INCREMENT,
				Product_Name		VARCHAR(50) UNIQUE NOT NULL,
				Price			   DECIMAL(8,2) NOT NULL,
				Indication		  VARCHAR(40) NOT NULL, 
				CONSTRAINT PK_product PRIMARY KEY (ID_product)
			);
		'''
		cursor.execute(sql)

		# Dropping table if already exists.
		#cursor.execute("DROP TABLE IF EXISTS Orders")

		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS Orders(
				ID_Orders		  INTEGER AUTO_INCREMENT, -- GENERATED BY DEFAULT AS IDENTITY
				--				   (START WITH 1 INCREMENT BY 1), -- simple auto-increment
				ID_Product		 INTEGER NOT NULL, -- FK
				ID_Client		  INTEGER NOT NULL, -- FK
				Order_Date		 DATE	NOT NULL, 
				Quantity		   INTEGER NOT NULL,
				CONSTRAINT PK_orders PRIMARY KEY (ID_orders),
				CONSTRAINT quantity_range_check CHECK(Quantity >= 10 AND Quantity <= 999999)
			);
			'''
		cursor.execute(sql)

		# Dropping table if already exists.
		#cursor.execute("DROP TABLE IF EXISTS Campaign")

		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS Campaign(
				ID_Product		  INTEGER NOT NULL, -- FK
				Campaign_Name	   VARCHAR(40) NOT NULL, -- not UNIQUE because weak entity
				Start_date		  DATE NOT NULL,
				End_date			DATE NOT NULL,
				CONSTRAINT PK_campaign PRIMARY KEY (ID_product, Campaign_Name),
				CONSTRAINT camp_date CHECK(Start_date < End_date) -- CHECK CONSTRAINT
			);
			'''
		cursor.execute(sql)

		# Dropping table if already exists.
		#cursor.execute("DROP TABLE IF EXISTS Employee")

		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS Employee(
				ID_employee		 INTEGER AUTO_INCREMENT, -- GENERATED BY DEFAULT AS IDENTITY
				--					(START WITH 1 INCREMENT BY 1),  -- simple auto-increment
				Firstname		   VARCHAR(25) NOT NULL,
				Lastname			VARCHAR(25) NOT NULL,
				Gender			  VARCHAR(1)  NOT NULL,
				Salary			  DECIMAL(8,2) DEFAULT 1500,
				Team_leader		 INTEGER, -- FK
				Hire_date		   DATE NOT NULL, 
				CONSTRAINT PK_emp PRIMARY KEY (ID_employee),
				CONSTRAINT emp_gender CHECK(Gender IN ('F','M','D')) -- CHECK CONSTRAINT
			);
			'''
		cursor.execute(sql)


		# Dropping table if already exists.
		#cursor.execute("DROP TABLE IF EXISTS Marketing_emp")

		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS Marketing_emp(
				ID_employee	 INTEGER, -- FK
				Occupation	  VARCHAR(80),
				CONSTRAINT PK_mark PRIMARY KEY (ID_employee)
			);
			'''

		cursor.execute(sql)


		# Dropping table if already exists.
		#cursor.execute("DROP TABLE IF EXISTS Advertises")

		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS Advertises(
				ID_employee		 INTEGER, -- FK
				ID_product		  INTEGER, -- FK
				CONSTRAINT PK_adv PRIMARY KEY (ID_employee, ID_product)
			);
			'''
		cursor.execute(sql)


		# Dropping table if already exists.
		#cursor.execute("DROP TABLE IF EXISTS General_Manager")

		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS General_Manager(
				ID_employee		 INTEGER, -- FK
				ID_region		   INTEGER UNIQUE NOT NULL, -- FK 
				CONSTRAINT PK_GM PRIMARY KEY (ID_employee)
			);
			''' 
		cursor.execute(sql)


		# Dropping table if already exists.
		#	cursor.execute("DROP TABLE IF EXISTS Region")

		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS Region(
				ID_region		   INTEGER AUTO_INCREMENT, 
				Region_Name		 VARCHAR(25) UNIQUE NOT NULL,
				CONSTRAINT PK_region PRIMARY KEY (ID_region)
			);
			'''
		cursor.execute(sql)


		# Dropping table if already exists.
		#cursor.execute("DROP TABLE IF EXISTS Country")

		# Creating table as per requirement
		sql = '''
			CREATE TABLE IF NOT EXISTS Country(
				Country_Name		VARCHAR(25) NOT NULL, -- PK
				ID_region		   INTEGER NOT NULL,  -- FK
				CONSTRAINT PK_country PRIMARY KEY (Country_Name)
			);

			'''
		cursor.execute(sql)
	
def alter_FK_constraints(cursor):
		sql = '''
			ALTER TABLE Client
				ADD CONSTRAINT FK_client_country
				FOREIGN KEY (Country_Name)
				REFERENCES Country (Country_Name) 
				ON DELETE CASCADE
			'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE Orders					  
			ADD CONSTRAINT FK_orders_product   FOREIGN KEY (ID_product)
			REFERENCES Product (ID_product) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE Orders					  
			ADD CONSTRAINT FK_orders_client FOREIGN KEY (ID_client)
			REFERENCES Client (ID_client) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE Campaign					  
			ADD CONSTRAINT FK_camp_product FOREIGN KEY (ID_product)
			REFERENCES Product (ID_product) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE Employee					  
			ADD CONSTRAINT FK_emp_leader FOREIGN KEY (Team_leader)
			REFERENCES Employee (ID_employee) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE Marketing_emp					  
			ADD CONSTRAINT FK_mark_emp FOREIGN KEY (ID_employee)
			REFERENCES Employee (ID_employee) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE Advertises					
			ADD CONSTRAINT FK_adv_prod FOREIGN KEY (ID_product)
			REFERENCES Product (ID_product) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE Advertises					 
			ADD CONSTRAINT FK_adv_mark FOREIGN KEY (ID_employee)
			REFERENCES Marketing_emp (ID_employee) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE General_Manager					  
			ADD CONSTRAINT FK_gm_emp FOREIGN KEY (ID_employee)
			REFERENCES Employee (ID_employee) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE General_Manager					  
			ADD CONSTRAINT FK_gm_reg FOREIGN KEY (ID_region)
			REFERENCES Region (ID_region) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)



		sql = '''
		ALTER TABLE Country				 
			ADD CONSTRAINT FK_country_reg FOREIGN KEY (ID_region)
			REFERENCES Region (ID_region) ON DELETE CASCADE
		;
		'''
		cursor.execute(sql)




def fillSQLlocal():
	# -------------------------------------------------------
	# -------------------connect mysql-----------------------
	# -------------------------------------------------------


	attempt=0; retry = 3; again=True
	while attempt < retry and again: 
		attempt +=1
		try: 
			#establishing the connection
			sql11Server="sql11.freemysqlhosting.net"
			sql11Name="sql11502641"
			sql11Username="sql11502641"
			sql11Password="DxUGZARlt7"
			sql11Port=3306

			connSQL = connector.connect(
			user=sql11Username, password=sql11Password, host=sql11Server, database=sql11Name, port=sql11Port
			)
		except Exception as e:
			print("[ERROR] Could not connect to SQL DB.", end=" ")
			if attempt <= retry: 
				print("Try again to connect to SQL DB.")
		else: 
			again = False
			print("[INFO] Connection to SQL DB successful.")


	cursor = connSQL.cursor(buffered=True)

	# -------------------Start Data Import-------------------

	drop_all_tables(connSQL)
	print("[INFO] ALL SQL Tables deleted")

	again = True
	retry = 5
	attempt = 0
	while(again and attempt < retry):
		attempt +=1 
		try:
			create_tables(cursor)
			alter_FK_constraints(cursor)
			again = False

		except Exception as e:
			print(f"[ERROR] Set FK constraints failed! Let's try again [{attempt}]", e)
			# reapeat the while-loop
			again = True
			

			if attempt >= retry-1: 
				print("[ERROR] Last attempt to set FK constraints! Drop all tables. Create new tables.")
				drop_all_tables(connSQL)
				#create_tables(cursor)
		
	if attempt >= retry:
		print(f"[FATAL ERROR] Tried {retry} times to set FK constraints. End program.")
		cursor.close(); connSQL.close()
		raise SystemExit

	else: 
		print("[INFO] Set FK constraints was successful!")



	##########################
	#   INSERT INTO TABLES   #
	##########################

	csvList = ["regions", "countries", "client_names", "products", "campaigns", "marketing_occupations", "advertises", "general_managers_id", "order_dates"]
	print("Current directory:", os.getcwd())

	''' # my insert notes # 

	Region :			all rows
	Country :		   all rows
	Client :			MAKE list of only names, random numbers from countries
	Product :		   all rows (no IDs?)
	Campaign :		  all rows (BUT prodcut id changed? datatime format?)
	Employee :		  all rows
	Marketing_emp :	 id_employee+20, occupations from csv
	Advertises :		all rows (BUT id product changed?)
	General_Manager :   all rows 
	Orders :			omg such complicated, need lots of buffers
	'''

	# Set directory of resource files 
	if "claas" in os.getcwd().lower():
		dir = "C:/Users/claas/Desktop/Uni_Wien/sem3/IMSE/christian/resources/"
	else: 
		dir = "/opt/resources/"



	# ------ INSERT REGIONS ------
	filepath = dir+"regions.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0
		content = csv.reader(file, delimiter=';')
		for line in content:
			cursor.execute(
				f"INSERT INTO Region (Region_Name) VALUES ('{line[0]}')"
				)
			print(f"[INFO] {i} records inserted into table Regions {line}" )
			i +=1
			connSQL.commit()
	regionRows = i
	print("[INFO] Rows affected:", regionRows)


	# ------ INSERT COUNTRIES ------
	countryBuffer = []

	filepath = dir+"countries.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0
		content = csv.reader(file, delimiter=',')
		for line in content:
			cursor.execute(
				f"INSERT INTO Country VALUES ('{line[0]}', '{line[1]}')"
				)
			print(f"[INFO] {i} records inserted into table Country {line}" )
			countryBuffer.append(line[0])
			i +=1
			connSQL.commit()
	countryRows = i
	print("[INFO] Rows affected:", countryRows)



	# ------ INSERT CLIENT ------
	clientBuffer = []

	filepath = dir+"client_names.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0
		content = csv.reader(file, delimiter=';')
		for line in content:
			randIndex = random.randint(0, len(countryBuffer)) -1 
			cursor.execute(
				f"INSERT INTO Client (Client_Name, Country_Name) VALUES ('{line[0]}', '{countryBuffer[randIndex]}')"
				)
			print(f"[INFO] {i} records inserted into table Client [{line[0]}, {countryBuffer[randIndex]}]" )
			clientBuffer.append(line[0])
			i +=1
			connSQL.commit()
	clientRows = i
	print("[INFO] Rows affected:", clientRows)





	# ------ INSERT PRODUCT ------
	productBuffer = [] # store IDs

	filepath = dir+"products.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0
		content = csv.reader(file, delimiter=';')
		for line in content:
			cursor.execute(
				f"INSERT INTO Product (ID_product, Product_Name, Price, Indication) VALUES" +
				f"('{line[0]}', '{line[1]}', '{line[2]}', '{line[3]}')"
				)
			print(f"[INFO] {i} records inserted into table Product {line}" )
			productBuffer.append(line[0]) # store IDs
			i +=1
			connSQL.commit()
	productRows = i
	print("[INFO] Rows affected:", productRows)




	# ------ INSERT CAMPAIGN ------

	filepath = dir+"campaigns.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0
		content = csv.reader(file, delimiter=';')
		for line in content:
			cursor.execute(
					f"INSERT INTO Campaign VALUES (" +				  
					f"'{line[0]}', '{line[1]}', " +   # ID_product, Campaign_Name
					f"STR_TO_DATE('{line[2]}', '%d-%m-%Y'), " + # Start_date
					f"STR_TO_DATE('{line[3]}', '%d-%m-%Y') )" # End_date

				)
			print(f"[INFO] {i} records inserted into table Campaign {line}" )
			i +=1
			connSQL.commit()
	campaignRows = i
	print("[INFO] Rows affected:", campaignRows)



	# ------ INSERT EMPLOYEE ------

	EMP_LIMIT = 300
	filepath = dir+"employees.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0
		first = True
		content = csv.reader(file, delimiter=';')
		for line in content:
			if first: 
				first=False; continue
			if i > EMP_LIMIT+1: 
				break
			cursor.execute(
				f"INSERT INTO Employee (Firstname, Lastname, Gender, Salary, team_leader, Hire_date)" + 
				f"VALUES ('{line[0]}', '{line[1]}', '{line[2]}', '{line[3]}', '{line[4]}', "+
				f"STR_TO_DATE('{line[5]}', '%Y-%m-%d'));"
				)
			print(f"[INFO] {i} records inserted into table Employee {line}" )
			i +=1
			connSQL.commit()
	print(f"[INFO]Limited to {EMP_LIMIT} rows")
	employeenRows = i
	print("[INFO] Rows affected:", employeenRows)



	# ------ INSERT MARKETING EMPLOYEE ------

	marketingEmpBuffer = []
	MARKET_EMP_LIMIT = 99

	filepath = dir+"marketing_occupations.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0
		oneRandomEmpIdList = random.sample(range(20, 300), MARKET_EMP_LIMIT)

		content = csv.reader(file, delimiter=';')
		for line in content:
			if i >= MARKET_EMP_LIMIT:
				break
			oneRandomEmpId = oneRandomEmpIdList[i]
			cursor.execute(
				f"INSERT INTO Marketing_emp VALUES ('{line[0]}', '{line[1]}');" 
			)
			print(f"[INFO] {i} records inserted into table Marketing_Employee {line}" )
			i +=1
			marketingEmpBuffer.append(oneRandomEmpId)
			connSQL.commit()
	markEmpRows = i
	print("[INFO] Rows affected:", markEmpRows)




	# ------ INSERT ADVERTISES ------

	ADV_LIMIT = MARKET_EMP_LIMIT
	filepath = dir+"advertises.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0; first=True
		content = csv.reader(file, delimiter=';')
		for line in content:
			if first: 
				first=False; continue
			if i > ADV_LIMIT:
				break
			randi = random.randint(0,MARKET_EMP_LIMIT-2)
			cursor.execute( 
				f"INSERT INTO Advertises (ID_employee, ID_product) " + 
				f"VALUES ('{line[0]}', '{line[1]}');" 
			)
			print(f"[INFO] {i} records inserted into table Advertises {line}" )
			i +=1
			connSQL.commit()
	advertisesRows = i
	print("[INFO] Rows affected:", advertisesRows)




	# ------ INSERT General Manager ------

	filepath = dir+"general_managers_id.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0
		content = csv.reader(file, delimiter=';')
		for line in content:
			cursor.execute( 
				f"INSERT INTO General_Manager (ID_Employee, ID_region) "+
				f"VALUES ('{line[0]}', '{line[1]}');" 
			)
			print(f"[INFO] {i} records inserted into table General_Manager {line})" )
			i +=1
			connSQL.commit()
	gmRows = i
	print("[INFO] Rows affected:", gmRows)






	# ------ INSERT ORDES ------

	ORDER_LIMIT=300
	filepath = dir+"order_dates.csv"
	print("----------------------------------------------------")
	with open(filepath) as file:
		i = 0
		randC = random.randint(1, clientRows-1)

		content = csv.reader(file, delimiter=';')
		for line in content:
			if i > ORDER_LIMIT: 
				break 
			randProd = random.randint(0, len(productBuffer)-1)

			randMill = random.randint(1, 9)*1000
			randHund = random.randint(1, 9)*100
			randTens = random.randint(1, 9)*10
			quantity = randMill + randHund + randTens

			randC = random.randint(1, clientRows-1)

			cursor.execute( 
				f"INSERT INTO Orders (ID_product, ID_client, Order_date, Quantity) " + 
				f"VALUES ('{productBuffer[randProd]}', " +  # Product_ID
				f"'{randC}', " +  # Client_ID
				f"STR_TO_DATE('{line[0]}', '%Y-%m-%d'), " +  # Date
				f"'{quantity}');"  # Quantity (int)
			)
			print(f"[INFO] {i} records inserted into table Orders ({productBuffer[randProd]}, {randC}, {line[0]}, {quantity})" )
			i +=1
			connSQL.commit()
	print(f"[INFO]Limited to {ORDER_LIMIT} rows")
	ordersRows = i
	print("[INFO] Rows affected:", ordersRows)









def migrateAllData():
	# -------------------------------------------------------
	# -------------------connect mysql-----------------------
	# -------------------------------------------------------


	attempt=0; retry = 3; again=True
	while attempt < retry and again: 
		attempt +=1
		try: 
			#establishing the connection
			sql11Server="sql11.freemysqlhosting.net"
			sql11Name="sql11502641"
			sql11Username="sql11502641"
			sql11Password="DxUGZARlt7"
			sql11Port=3306

			connSQL = connector.connect(
			user=sql11Username, password=sql11Password, host=sql11Server, database=sql11Name, port=sql11Port
			)
		except Exception as e:
			print("[ERROR] Could not connect to SQL DB.", end=" ")
			if attempt <= retry: 
				print("Try again to connect to SQL DB.")
		else: 
			again = False
			print("[INFO] Connection to SQL DB successful.")


	cursorSQL = connSQL.cursor(buffered=True)


	# -----------------------------------------------------------
	# ------------------------ NoSQL ----------------------------
	# -----------------------------------------------------------

	#Write data into NOSQL
	clientCollection=dbDrug['Client']
	regionCollection=dbDrug['Region']
	orderCollection=dbDrug['Order']
	productCollection=dbDrug['Product']
	employeeCollection=dbDrug['Employee']


	# -------------------- Delete NoSQL Tables ------------------------

	#Delet everythin in collection
	clientCollection.delete_many({})
	regionCollection.delete_many({})
	orderCollection.delete_many({})
	productCollection.delete_many({})
	employeeCollection.delete_many({})
	print("[INFO] All collections deleted")



	try: 
		# ----------------------------------------------------------------- 
		# -------------------- Create NoSQL Tables ------------------------
  	# ----------------------------------------------------------------- 


		def creatDate(date):
			res = datetime.datetime.strptime(str(date), "%Y-%m-%d")
			return res





		# ------------ PRODUCT ------------------

		def creatCampaign(campaign):
			return {"name":str(campaign[0]), "StartDate":creatDate(campaign[1]), "EndDate":creatDate(campaign[2])}


		def inserProduct(name, price, campaigns, indications, marketingEmps , dbDrug):
			collection = dbDrug['Product']

			campaignsInsert = []
			for eachCampaign in campaigns:
				campaignsInsert.append(creatCampaign(eachCampaign))


			indicationsInser = []
			for eachIndication in indications:
				indicationsInser.append(eachIndication)

			marketingEmpInser = []
			for eachmarketingEmp in marketingEmps:
				marketingEmpInser.append({"Name": eachmarketingEmp[0], "Occupation": eachmarketingEmp[1]})


			doc = { "$set":{ "name": name, "price": int(price), "Campaigns": campaignsInsert, "indications": indications, "Marketing_Emp": marketingEmpInser }}
			filter = { 'name': name }
			collection.update_one(filter, doc,  True)

			



		cursorSQL.execute(
		"""
		SELECT * FROM Product
		"""
		)
		
		allProducts = cursorSQL.fetchall()
		countPoduct = 0
		for eachProduct in allProducts:
			name = eachProduct[1]
			price = eachProduct[2]
			indications = eachProduct[3]

			campaigns = []
			cursorSQL.execute(
			"""
			SELECT * FROM Campaign
			WHERE ID_Product="""+ str(eachProduct[0])
			)
			allCampaigns = cursorSQL.fetchall()
			for eachCampaign in allCampaigns:
				campaigns.append([eachCampaign[1], eachCampaign[2], eachCampaign[3]])


			cursorSQL.execute(
			"""
			SELECT * FROM Product JOIN Advertises
			ON Product.ID_product=Advertises.ID_product
			JOIN Employee
			ON Employee.ID_employee=Advertises.ID_employee
			JOIN Marketing_emp
			ON Employee.ID_employee=Marketing_emp.ID_employee
			WHERE Product.ID_product="""+ str(eachProduct[0])
			)
			
			allmarketingEmp = cursorSQL.fetchall()
			marketingEmps= []
			for eachmarketingEmp in allmarketingEmp:
				marketingEmps.append([eachmarketingEmp[7]+" "+ eachmarketingEmp[8], eachmarketingEmp[14] ])


			inserProduct(name, price, campaigns, indications, marketingEmps , dbDrug)
			countPoduct += 1

		print(f"[INFO] {countPoduct} new Products inserted to DB")



			
		# ---------------------- Employee -------------------------

		def insertEmployee(name, gender, salery, teamLeader, hirDate):
			collection = dbDrug['Employee']
			doc = { "$set":{"Name": name, "Gender": gender, "Salary": int(salery), "Team_Leader": teamLeader, "Hir_Date": creatDate(hirDate)}}
			filter = { 'Name': name }
			collection.update_one(filter, doc,  True)


		cursorSQL.execute(
		"""
		SELECT * FROM Employee
		"""
		)
		allEmployees = cursorSQL.fetchall()
		employeeCount = 0
		for eachEmployee in allEmployees:
			name = eachEmployee[1] + " " +eachEmployee[2]
			gender = eachEmployee[3]
			salery = int(eachEmployee[4])
			teamLeader = eachEmployee[5]
			hirDate = eachEmployee[6]
			insertEmployee(name, gender, salery, teamLeader, hirDate)
			employeeCount += 1
		
		print(f"[INFO] {employeeCount} new Employees inserted to DB")







		#-------------Region-------------------

		def insertRegion(name, countries, gm):
			collection = dbDrug['Region']
			
			doc = { "$set":{ "name": name, "Countries": countries, "General_Manager": gm}}
			filter = { 'name': name }
			collection.update_one(filter, doc,  True)




		def findCountries(regionID, cursorSQL):
			resAllCountries = []
			cursorSQL.execute(
			"""
			SELECT * FROM Country
			WHERE ID_region="""+ str(regionID)
			)
			
			allCountries = cursorSQL.fetchall()
			for eachCountry in allCountries:
				resAllCountries.append(eachCountry[0])

			return resAllCountries


		def findGM(regionID, cursorSQL):
			resGM = []
			cursorSQL.execute(
			"""
			SELECT * FROM General_Manager JOIN Employee
			ON General_Manager.ID_employee=Employee.ID_employee
			WHERE ID_region="""+str(regionID)
			)
			
			GM = cursorSQL.fetchall()
			return {"Name": str(GM[0][3])+" "+ str(GM[0][4]), "Gender": GM[0][5], "Salery": int(GM[0][6]), "Team_Leader": GM[0][7], "Hire_Date": creatDate(GM[0][8])}




		cursorSQL.execute(
		"""
		SELECT * FROM Region
		"""
		)
		allRegions = cursorSQL.fetchall()
		countRegion = 0
		for eachRegion in allRegions:
			regionID = eachRegion[0]
			nameRegion = eachRegion[1]
			countries = findCountries(regionID, cursorSQL)
			generalManager = findGM(regionID, cursorSQL)



			insertRegion(nameRegion, countries, generalManager )
			countRegion += 1
		
		print(f"[INFO] {countRegion} new Regions inserted to DB")






		# ----------------- Client --------------------

		def inserCliet(name, country, dbDrug ):
			collection = dbDrug['Client']
			doc = { "$set":{ "name": name, "country_name": country }}
			filter = { 'name': name }
			collection.update_one(filter, doc,  True)


		cursorSQL.execute(
		"""
		SELECT * FROM Client
		"""
		)
		
		res = cursorSQL.fetchall()
		countClient = 0
		for ecahClient in res:
			name = ecahClient[1]
			country = ecahClient[2]
			inserCliet(name, country,  dbDrug)
			countClient += 1
		
		print(f"[INFO] {countClient} new Client inserted to DB")








		# ------------------ ORDER -------------------

		def inserOrder(orderID, client, product, orderDate, quantity,price, dbDrug ):
			collection = dbDrug['Order']
			date = creatDate(orderDate)
			doc = { "$set":{ "orderID": orderID, "client": client, "Product": product, "Order_Date": date,"Quantity": quantity, "Price": price }}
			filter = { 'orderID': orderID }
			collection.update_one(filter, doc,  True)



		cursorSQL.execute(
		"""
		SELECT * FROM Orders JOIN Product
		ON Orders.ID_Product=Product.ID_product
		JOIN Client
		ON Orders.ID_Client=Client.ID_client
		"""
		)
		res = cursorSQL.fetchall()
		countOrder = 0
		for eachOrder in res:
			orderID = eachOrder[0]
			client = eachOrder[10]
			product = eachOrder[6]
			orderDate = eachOrder[3]
			price = int(eachOrder[7])
			quantity = int(eachOrder[4])
			inserOrder(orderID, client, product, orderDate, quantity,price, dbDrug )
			countOrder += 1
		print(f"[INFO] {countOrder} new Orders added to DB")



		
	except Exception as e: 
			print("[ERROR] Could not migrate data from SQL Database to MongoDB.", e)
	finally: 
		cursorSQL.close()
		connSQL.close()
		print("[INFO] SQL connection terminated.")


if AutoMigrate:
	migrateAllData()







# ---------------------------------------------------------
# --------------- Functions for frontend ------------------
# ---------------------------------------------------------





def getAllEmployee():
	res= []
	collection=dbDrug['Employee']
	cursor = collection.find({} ).sort("Name", 1)
	for eachEmployee in cursor:
		res.append(str(eachEmployee["Name"]).replace(" ", "_"))
	return res


def redirect_url():
	return request.args.get('next') or \
		request.referrer or \
		url_for('index')

def resultFromSession():
	res = {}
	for i in session:
		res[i] = session[i]
	return res




@app.route("/MaketingEmpAbb", methods=['GET'])
def MaketingEmpAbb():
	#------------	Marketing Employee Add  -----------------------
	try:
		occupation = str(request.values.get("occupation"))
		employeeName = request.values.get("refer")
	except Exception:
		print("[INFO] not valid Imput")
		return render_template('credits.html',t=title,h=heading, results= resultFromSession())
	
	try:
		marketingEmplocal = session["marketingEmp"]
	except Exception:
		session["marketingEmp"] = []
		marketingEmplocal = []
	marketingEmplocal.append( {"Name":employeeName.replace("_", " "), "Occupation":occupation})
	session["marketingEmp"] = marketingEmplocal
	session["marketingEmpLenInfo"] = f"You have added {len(marketingEmplocal)} marketingEmps"
	return render_template('credits.html',t=title,h=heading, results= resultFromSession())




@app.route("/campaignAdd", methods=['GET'])
def campaignAdd():
	#------------	campaignAdd  -----------------------
	try:
		nameOfCampaign = str(request.values.get("CampaignName"))
		startOfCampaign = creatDate(request.values.get("dateStart"))
		endOfCampaign = creatDate(request.values.get("dateEnd"))
	except Exception:
		print("[INFO] not valid Imput")
		return render_template('credits.html',t=title,h=heading, results= resultFromSession())
	try:
		campaignslocal = session["campaigns"]
	except Exception:
		session["campaigns"] = []
		campaignslocal = []
	campaignslocal.append( {"name":nameOfCampaign, "StartDate":startOfCampaign, "EndDate":endOfCampaign})
	session["campaigns"] = campaignslocal
	session["campaignLenInfo"] = f"You have added {len(campaignslocal)} campaigns"
	return render_template('credits.html',t=title,h=heading, results= resultFromSession())




@app.route("/Af1", methods=['GET'])
def Af1():
	#------------	ABFRAGE1-----------------------
	nameOfProduct = str(request.values.get("name"))
	indication = str(request.values.get("indication"))
	try:
		price = int(request.values.get("price"))
	except Exception:
		session["Af1Info"] = f"Price need to be an int3"
		return render_template('credits.html',t=title,h=heading, results= resultFromSession())

	try:
		campaignslocal = session["campaigns"]
	except Exception:
		campaignslocal = []

	try:
		marketingEmplocal = session["marketingEmp"]
	except Exception:
		marketingEmplocal = []

	newDoc = { "$set":{ "name": nameOfProduct, "indications": indication, "price": price , "Campaigns": campaignslocal, "Marketing_Emp": marketingEmplocal}}

	collection=dbDrug['Product']
	filter = { 'name': nameOfProduct }
	collection.update_one(filter, newDoc,  True)
	res = "The following product was inserted: " + nameOfProduct
	print(f"[INFO] {res}")

	session["res1"] = res

	return render_template('credits.html',t=title,h=heading, results= resultFromSession())




@app.route("/Af2", methods=['GET'])
def Af2():
	#------------	ABFRAGE2 -----------------------
	nameOfCountry = str(request.values.get("country"))
	nameOfClient = str(request.values.get("name"))
	newDoc = { "$set":{ "name": nameOfClient, "country_name":nameOfCountry }}
	collection=dbDrug['Client']
	collectionRegion=dbDrug['Region']
	res= f"The Client with the Name {nameOfClient} was inserted"

	filter = { 'name': nameOfClient }
	count =  (collectionRegion.count_documents({ "Countries" : nameOfCountry }))
	if count == 1:
		filter = { 'name': nameOfClient }
		collection.update_one(filter, newDoc,  True)
	else:		
		res= "The company does not supply the country"

	session["res2"] = res

	return render_template('credits.html',t=title,h=heading, results= resultFromSession())




@app.route("/Af3", methods=['GET'])
def Af3():
	#------------	ABFRAGE3-----------------------
	nameOfRegion = str(request.values.get("key"))
	resAf3 = "The GM could not be found in given Region " + nameOfRegion
	collection = dbDrug['Region']
	cursor = (collection.find({ "name" : nameOfRegion } ))
	#cursor2 = (cursor["Regions"])
	for eachRegion in cursor:
		resAf3 = f"The GM for {nameOfRegion} is: " + str(eachRegion["General_Manager"]["Name"])
	
	#session["resAf3"] = resAf3
	session["res3"] = resAf3

	return render_template('credits.html',t=title,h=heading, results= resultFromSession())




@app.route("/Af4", methods=['GET'])
def Af4():
	#------------	ABFRAGE4-----------------------
	collection=dbDrug['Order']
	cursor = collection.find().sort("Order_Date", -1).limit(5)
	resAf4 = []
	
	for document in cursor:
		resAf4.append([document["orderID"], str(document["Order_Date"])])

	if len(resAf4) != 5:
		resAf4 = ["There where not enouth orders found"]
	

	session["res4"] = resAf4
	session["res4Done"] = True

	return render_template('credits.html',t=title,h=heading, results= resultFromSession())

def subtrackOneMonth(inDate):
	return inDate.replace(
    year=inDate.year if inDate.month > 1 else inDate.year - 1,
    month=inDate.month - 1 if inDate.month > 1 else 12,
    day=1)




@app.route("/Rep1", methods=['GET'])
def Rep1():
	#------------	Rep1 -----------------------
	collection=dbDrug['Product']
	resRp1 = []

	try:
		numberMonth = int(request.values.get("limit"))
	except Exception:
		session["Rep1Info"] = f"Limit need to be an int32"
		return render_template('credits.html',t=title,h=heading, results= resultFromSession())

	coursor = collection.find( { "price": { "$lt": numberMonth } } ).sort("price", -1).limit(5)
	for document in coursor:
		resRp1.append([document["name"], str(document["price"])])

	if len(resRp1)> 0:
		session["resRp1Done"] = True
		session["resRp1"] = resRp1
	else:
		session["Rep1Info"] = f"No Below this limit {numberMonth}"

	return render_template('credits.html',t=title,h=heading, results= resultFromSession())




@app.route("/Rep2", methods=['GET'])
def Rep2():
	#------------	Rep2-----------------------
	collection=dbDrug['Client']
	resRp2 = []
	countryName = request.values.get("country")
	
	coursor = collection.find( { "country_name": countryName } ).sort("country_name", 1)
	for document in coursor:
		resRp2.append([document["name"]])

	if len(resRp2)> 0:
		session["resRp2Done"] = True
		session["resRp2"] = resRp2
	else:
		session["Rep2Info"] = f"No Clients in the country: {countryName}"
	return render_template('credits.html',t=title,h=heading, results= resultFromSession())




# ----------- Clear -------------
@app.route("/clearSession", methods=['GET'])
def sessionClear():
	session.clear()
	print("[INFO] SESSION CLEAR")
	return redirect("http://localhost:5000/about")



# ----------- Migrate -------------
@app.route("/migrate", methods=['GET'])
def migrate():
	print("[INFO] Start to migrate")
	if session["migrateDone"] :
		migrateAllData()
		session["migrateInfo"] = f"Migration completed"
		session["migrateDone"] = False
	else: 
		session["migrateInfo"] = f"Migration already completed"
	return render_template('index.html', results = resultFromSession())



# ----------- Fill SQl -------------
@app.route("/fillSQL", methods=['GET'])
def fillSQL():
	print("[INFO] Start to fill SQL")
	if session["sqlFillDone"]:
		fillSQLlocal()
		session["SQLInfo"] = f"SQL DB ready"
		session["sqlFillDone"] = False
	else:
		session["SQLInfo"] = f"SQL DB already ready"
	return render_template('index.html', results = resultFromSession())



@app.route("/")
def start():
	session.clear()
	session["sqlFillDone"] = True
	session["migrateDone"] = True
	return render_template('index.html', results = resultFromSession())



@app.route("/about", methods=[ "GET", "POST"])
def about(results = {}):
	session["employeeList"] = getAllEmployee()
	return render_template('credits.html',t=title,h=heading, results= resultFromSession())





if __name__ == "__main__":
	#session.clear()
	env = os.environ.get('APP_ENV', 'development')
	port = int(os.environ.get('PORT', 5000))
	debug = False if env == 'production' else True
	app.run(host='0.0.0.0', port=port, debug=debug)
	# Careful with the debug mode..