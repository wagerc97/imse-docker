##!/usr/bin/env python3

from errno import errorcode
from math import prod
import os
import random
import time
import csv
import logging
import mysql.connector as connector
from mysql.connector import Error
from decouple import config

start_time = time.time()
logging.basicConfig(level=logging.INFO)
random.seed(42)





#############################
#   ESTABLISH CONNECTION    #
#############################

#again = True; retry = 5; attempt = 0
#while(again and attempt < retry):
#    attempt +=1 
#    try:

attempt=0; retry = 3; again=True
while attempt < retry and again: 
    attempt +=1
    try:

        # TO CONNECT TO SERVER
        """
        user = config('USER2',default='')
        password = config('PASSWORD2',default='')
        host = config('SERVER2"',default='')
        db_name = config('DB_NAME2',default='')
        port = config('PORT2',default='')
        """

        user = "sql11502641"
        password = "DxUGZARlt7"
        host = "sql11.freemysqlhosting.net"
        db_name = "sql11502641"
        port = 3306

        # TO CONNECT TO MYSQL DOCKER
        """
        user = config('DOCKER_USER',default='')
        password = config('DOCKER_PASSWORD',default='')
        host = config('DOCKER_SERVER',default='')
        db_name = config('DOCKER_DB_NAME',default='')
        port = config('DOCKER_PORT',default='')
        """
        conn = connector.connect(user=user, password=password, host=host, database=db_name, port=port)

    except Error as e: 
        if attempt <= retry: # try again 
            print(f"[ERROR] Connection failed! Let's try again [{attempt}] ->", e)
            time.sleep(5)
        elif attempt > retry: # last chance gone
            print(f"[FATAL ERROR] Tried {retry} times to establish connection to DB. End program.")
            conn.close()
            raise SystemExit
    else: # success
        again= False
        print("[INFO] Connection to DB successful!")



#####################################
#   DELETE TABLES HELPER FUNCTION   #
#####################################

def drop_all_tables():

    # Creating a cursor object using the cursor() method
    cursor = conn.cursor()
    
    DROPS={}


    DROPS['Orders'] = ("DROP TABLE IF EXISTS Orders CASCADE;")
    DROPS['Advertises'] = ("DROP TABLE IF EXISTS Advertises CASCADE;")
    DROPS['Marketing_emp'] = ("DROP TABLE IF EXISTS Marketing_emp CASCADE;")
    DROPS['General_Manager'] = ("DROP TABLE IF EXISTS General_Manager CASCADE;")
    DROPS['Campaign'] = ("DROP TABLE IF EXISTS Campaign CASCADE;")
    DROPS['Product'] = ("DROP TABLE IF EXISTS Product CASCADE;")
    DROPS['Employee'] = ("DROP TABLE IF EXISTS Employee CASCADE;")
    DROPS['Client'] = ("DROP TABLE IF EXISTS Client CASCADE;")
    DROPS['Country'] = ("DROP TABLE IF EXISTS Country CASCADE;")
    DROPS['Region'] = ("DROP TABLE IF EXISTS Region CASCADE;")


    for table_name in DROPS:
        table_description = DROPS[table_name]
        try:
            print("[INFO] Dropping table {}: ".format(table_name), end='')
            cursor.execute(table_description)
        except connector.Error as err:
            if err.errno == errorcode.ER_TABLESPACE_DISCARDED: # error of table does not exist anymore 
                print("[CAUTION] Table does not exists")
            else:
                print(err.msg)
        else:
            print("[INFO] OK, table dropped.")
        finally: 
            pass










#####################
#### MAIN METHOD ####
try:
    # Creating a cursor object using the cursor() method
    cursor = conn.cursor()


    ######################
    #   CREATE TABLES    #
    ######################

    def create_tables():
        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS Client(
                ID_client          INTEGER AUTO_INCREMENT,
                Client_Name        VARCHAR(50) NOT NULL,
                Country_Name       VARCHAR(25) NOT NULL, -- FK
                CONSTRAINT PK_client PRIMARY KEY (ID_client)
            );
            '''
        cursor.execute(sql)

        # Dropping table if already exists.
        #cursor.execute("DROP TABLE IF EXISTS Product")

        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS Product(
                ID_product          INTEGER AUTO_INCREMENT,
                Product_Name        VARCHAR(50) UNIQUE NOT NULL,
                Price               DECIMAL(8,2) NOT NULL,
                Indication          VARCHAR(40) NOT NULL, 
                CONSTRAINT PK_product PRIMARY KEY (ID_product)
            );
        '''
        cursor.execute(sql)

        # Dropping table if already exists.
        #cursor.execute("DROP TABLE IF EXISTS Orders")

        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS Orders(
                ID_Orders          INTEGER AUTO_INCREMENT, -- GENERATED BY DEFAULT AS IDENTITY
                --                   (START WITH 1 INCREMENT BY 1), -- simple auto-increment
                ID_Product         INTEGER NOT NULL, -- FK
                ID_Client          INTEGER NOT NULL, -- FK
                Order_Date         DATE    NOT NULL, 
                Quantity           INTEGER NOT NULL,
                CONSTRAINT PK_orders PRIMARY KEY (ID_orders),
                CONSTRAINT quantity_range_check CHECK(Quantity >= 10 AND Quantity <= 999999)
            );
            '''
        cursor.execute(sql)

        # Dropping table if already exists.
        #cursor.execute("DROP TABLE IF EXISTS Campaign")

        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS Campaign(
                ID_Product          INTEGER NOT NULL, -- FK
                Campaign_Name       VARCHAR(40) NOT NULL, -- not UNIQUE because weak entity
                Start_date          DATE NOT NULL,
                End_date            DATE NOT NULL,
                CONSTRAINT PK_campaign PRIMARY KEY (ID_product, Campaign_Name),
                CONSTRAINT camp_date CHECK(Start_date < End_date) -- CHECK CONSTRAINT
            );
            '''
        cursor.execute(sql)

        # Dropping table if already exists.
        #cursor.execute("DROP TABLE IF EXISTS Employee")

        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS Employee(
                ID_employee         INTEGER AUTO_INCREMENT, -- GENERATED BY DEFAULT AS IDENTITY
                --                    (START WITH 1 INCREMENT BY 1),  -- simple auto-increment
                Firstname           VARCHAR(25) NOT NULL,
                Lastname            VARCHAR(25) NOT NULL,
                Gender              VARCHAR(1)  NOT NULL,
                Salary              DECIMAL(8,2) DEFAULT 1500,
                Team_leader         INTEGER, -- FK
                Hire_date           DATE NOT NULL, 
                CONSTRAINT PK_emp PRIMARY KEY (ID_employee),
                CONSTRAINT emp_gender CHECK(Gender IN ('F','M','D')) -- CHECK CONSTRAINT
            );
            '''
        cursor.execute(sql)


        # Dropping table if already exists.
        #cursor.execute("DROP TABLE IF EXISTS Marketing_emp")

        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS Marketing_emp(
                ID_employee     INTEGER, -- FK
                Occupation      VARCHAR(80),
                CONSTRAINT PK_mark PRIMARY KEY (ID_employee)
            );
            '''

        cursor.execute(sql)


        # Dropping table if already exists.
        #cursor.execute("DROP TABLE IF EXISTS Advertises")

        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS Advertises(
                ID_employee         INTEGER, -- FK
                ID_product          INTEGER, -- FK
                CONSTRAINT PK_adv PRIMARY KEY (ID_employee, ID_product)
            );
            '''
        cursor.execute(sql)


        # Dropping table if already exists.
        #cursor.execute("DROP TABLE IF EXISTS General_Manager")

        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS General_Manager(
                ID_employee         INTEGER, -- FK
                ID_region           INTEGER UNIQUE NOT NULL, -- FK 
                CONSTRAINT PK_GM PRIMARY KEY (ID_employee)
            );
            ''' 
        cursor.execute(sql)


        # Dropping table if already exists.
        #    cursor.execute("DROP TABLE IF EXISTS Region")

        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS Region(
                ID_region           INTEGER AUTO_INCREMENT, 
                Region_Name         VARCHAR(25) UNIQUE NOT NULL,
                CONSTRAINT PK_region PRIMARY KEY (ID_region)
            );
            '''
        cursor.execute(sql)


        # Dropping table if already exists.
        #cursor.execute("DROP TABLE IF EXISTS Country")

        # Creating table as per requirement
        sql = '''
            CREATE TABLE IF NOT EXISTS Country(
                Country_Name        VARCHAR(25) NOT NULL, -- PK
                ID_region           INTEGER NOT NULL,  -- FK
                CONSTRAINT PK_country PRIMARY KEY (Country_Name)
            );

            '''
        cursor.execute(sql)
        
### EOF            



    again = True; retry = 5; attempt = 0
    while(again and attempt < retry):
        attempt +=1 
        try:

            create_tables()
            again = False

        except Error as e:
            print("[ERROR]Create tables failed. Drop all tables and create new.", e)
            # if any error occured, all tables will be deleted and the process is repeated
            drop_all_tables()
            time.sleep(1)
            # reapeat the while-loop
            again = True


    if attempt >= retry: 
        print(f"[FATAL ERROR]Tried {retry} times to create tables. End program.")
        cursor.close(); conn.close()
        raise SystemExit

    else: 
        print("[INFO]CREATE TABLES successful!")





    ############################
    #   ALTER FK CONSTRAINTS   #
    ############################



    def alter_FK_constraints():
        sql = '''
            ALTER TABLE Client
                ADD CONSTRAINT FK_client_country
                FOREIGN KEY (Country_Name)
                REFERENCES Country (Country_Name) 
                ON DELETE CASCADE
            '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE Orders                      
            ADD CONSTRAINT FK_orders_product   FOREIGN KEY (ID_product)
            REFERENCES Product (ID_product) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE Orders                      
            ADD CONSTRAINT FK_orders_client FOREIGN KEY (ID_client)
            REFERENCES Client (ID_client) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE Campaign                      
            ADD CONSTRAINT FK_camp_product FOREIGN KEY (ID_product)
            REFERENCES Product (ID_product) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE Employee                      
            ADD CONSTRAINT FK_emp_leader FOREIGN KEY (Team_leader)
            REFERENCES Employee (ID_employee) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE Marketing_emp                      
            ADD CONSTRAINT FK_mark_emp FOREIGN KEY (ID_employee)
            REFERENCES Employee (ID_employee) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE Advertises                    
            ADD CONSTRAINT FK_adv_prod FOREIGN KEY (ID_product)
            REFERENCES Product (ID_product) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE Advertises                     
            ADD CONSTRAINT FK_adv_mark FOREIGN KEY (ID_employee)
            REFERENCES Marketing_emp (ID_employee) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE General_Manager                      
            ADD CONSTRAINT FK_gm_emp FOREIGN KEY (ID_employee)
            REFERENCES Employee (ID_employee) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE General_Manager                      
            ADD CONSTRAINT FK_gm_reg FOREIGN KEY (ID_region)
            REFERENCES Region (ID_region) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)



        sql = '''
        ALTER TABLE Country                 
            ADD CONSTRAINT FK_country_reg FOREIGN KEY (ID_region)
            REFERENCES Region (ID_region) ON DELETE CASCADE
        ;
        '''
        cursor.execute(sql)
### EOF


    again = True; retry = 5; attempt = 0
    while(again and attempt < retry):
        attempt +=1 
        try:

            alter_FK_constraints()
            again = False

        except Error as e:
            print(f"[ERROR] Set FK constraints failed! Let's try again [{attempt}]", e)
            # reapeat the while-loop
            again = True
            time.sleep(1)

            if attempt >= retry-1: 
                print("[ERROR] Last attempt to set FK constraints! Drop all tables. Create new tables.")
                drop_all_tables()
                create_tables()
                time.sleep(3)
        
    if attempt >= retry:
        print(f"[FATAL ERROR] Tried {retry} times to set FK constraints. End program.")
        cursor.close(); conn.close()
        raise SystemExit

    else: 
        print("[INFO] Set FK constraints was successful!")



    ##########################
    #   INSERT INTO TABLES   #
    ##########################

    csvList = ["regions", "countries", "client_names", "products", "campaigns", "marketing_occupations", "advertises", "general_managers_id", "order_dates"]
    print("Current directory:", os.getcwd())

    ''' # my insert notes # 

    Region :            all rows
    Country :           all rows
    Client :            MAKE list of only names, random numbers from countries
    Product :           all rows (no IDs?)
    Campaign :          all rows (BUT prodcut id changed? datatime format?)
    Employee :          all rows
    Marketing_emp :     id_employee+20, occupations from csv
    Advertises :        all rows (BUT id product changed?)
    General_Manager :   all rows 
    Orders :            omg such complicated, need lots of buffers
    '''

    # Set directory of resource files 
    if "vscode" in os.getcwd().lower():
        dir = "C:/Users/clemens/VSCodeProjects/imse-docker/python/resources/"
    else: 
        dir = "/opt/resources/"



    # ------ INSERT REGIONS ------
    filepath = dir+"regions.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0
        content = csv.reader(file, delimiter=';')
        for line in content:
            cursor.execute(
                f"INSERT INTO Region (Region_Name) VALUES ('{line[0]}')"
                )
            print(f"[INFO] {i} records inserted into table Regions {line}" )
            i +=1
            conn.commit()
    regionRows = i
    print("[INFO] Rows affected:", regionRows)


    # ------ INSERT COUNTRIES ------
    countryBuffer = []

    filepath = dir+"countries.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0
        content = csv.reader(file, delimiter=',')
        for line in content:
            cursor.execute(
                f"INSERT INTO Country VALUES ('{line[0]}', '{line[1]}')"
                )
            print(f"[INFO] {i} records inserted into table Country {line}" )
            countryBuffer.append(line[0])
            i +=1
            conn.commit()
    countryRows = i
    print("[INFO] Rows affected:", countryRows)



    # ------ INSERT CLIENT ------
    clientBuffer = []

    filepath = dir+"client_names.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0
        content = csv.reader(file, delimiter=';')
        for line in content:
            randIndex = random.randint(0, len(countryBuffer)) -1 
            cursor.execute(
                f"INSERT INTO Client (Client_Name, Country_Name) VALUES ('{line[0]}', '{countryBuffer[randIndex]}')"
                )
            print(f"[INFO] {i} records inserted into table Client [{line[0]}, {countryBuffer[randIndex]}]" )
            clientBuffer.append(line[0])
            i +=1
            conn.commit()
    clientRows = i
    print("[INFO] Rows affected:", clientRows)





    # ------ INSERT PRODUCT ------
    productBuffer = [] # store IDs

    filepath = dir+"products.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0
        content = csv.reader(file, delimiter=';')
        for line in content:
            cursor.execute(
                f"INSERT INTO Product (ID_product, Product_Name, Price, Indication) VALUES" +
                f"('{line[0]}', '{line[1]}', '{line[2]}', '{line[3]}')"
                )
            print(f"[INFO] {i} records inserted into table Product {line}" )
            productBuffer.append(line[0]) # store IDs
            i +=1
            conn.commit()
    productRows = i
    print("[INFO] Rows affected:", productRows)






    # ------ INSERT CAMPAIGN ------

    filepath = dir+"campaigns.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0
        content = csv.reader(file, delimiter=';')
        for line in content:
            cursor.execute(
                    f"INSERT INTO Campaign VALUES (" +                  
                    f"'{line[0]}', '{line[1]}', " +   # ID_product, Campaign_Name
                    f"STR_TO_DATE('{line[2]}', '%d-%m-%Y'), " + # Start_date
                    f"STR_TO_DATE('{line[3]}', '%d-%m-%Y') )" # End_date

                )
            print(f"[INFO] {i} records inserted into table Campaign {line}" )
            i +=1
            conn.commit()
    campaignRows = i
    print("[INFO] Rows affected:", campaignRows)



    # ------ INSERT EMPLOYEE ------

    EMP_LIMIT = 300
    filepath = dir+"employees.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0
        first = True
        content = csv.reader(file, delimiter=';')
        for line in content:
            if first: 
                first=False; continue
            if i > EMP_LIMIT+1: 
                break
            cursor.execute(
                f"INSERT INTO Employee (Firstname, Lastname, Gender, Salary, team_leader, Hire_date)" + 
                f"VALUES ('{line[0]}', '{line[1]}', '{line[2]}', '{line[3]}', '{line[4]}', "+
                f"STR_TO_DATE('{line[5]}', '%Y-%m-%d'));"
                )
            print(f"[INFO] {i} records inserted into table Employee {line}" )
            i +=1
            conn.commit()
    print(f"[INFO]Limited to {EMP_LIMIT} rows")
    employeenRows = i
    print("[INFO] Rows affected:", employeenRows)



    # ------ INSERT MARKETING EMPLOYEE ------

    marketingEmpBuffer = []
    MARKET_EMP_LIMIT = 99

    filepath = dir+"marketing_occupations.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0
        oneRandomEmpIdList = random.sample(range(20, 300), MARKET_EMP_LIMIT)

        content = csv.reader(file, delimiter=';')
        for line in content:
            if i >= MARKET_EMP_LIMIT:
                break
            oneRandomEmpId = oneRandomEmpIdList[i]
            cursor.execute(
                f"INSERT INTO Marketing_emp VALUES ('{oneRandomEmpId}', '{line[0]}');" 
            )
            print(f"[INFO] {i} records inserted into table Marketing_Employee {line}" )
            i +=1
            marketingEmpBuffer.append(oneRandomEmpId)
            conn.commit()
    markEmpRows = i
    print("[INFO] Rows affected:", markEmpRows)




    # ------ INSERT ADVERTISES ------

    ADV_LIMIT = 300
    filepath = dir+"advertises.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0; first=True
        content = csv.reader(file, delimiter=';')
        for line in content:
            if first: 
                first=False; continue
            if i > ADV_LIMIT:
                break
            randi = random.randint(0,MARKET_EMP_LIMIT-2)
            cursor.execute( 
                f"INSERT INTO Advertises (ID_employee, ID_product) " + 
                f"VALUES ('{marketingEmpBuffer[randi]}', '{line[1]}');" 
            )
            print(f"[INFO] {i} records inserted into table Advertises {line}" )
            i +=1
            conn.commit()
    advertisesRows = i
    print("[INFO] Rows affected:", advertisesRows)




    # ------ INSERT General Manager ------

    filepath = dir+"general_managers_id.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0
        content = csv.reader(file, delimiter=';')
        for line in content:
            cursor.execute( 
                f"INSERT INTO General_Manager (ID_Employee, ID_region) "+
                f"VALUES ('{line[0]}', '{line[1]}');" 
            )
            print(f"[INFO] {i} records inserted into table General_Manager {line})" )
            i +=1
            conn.commit()
    gmRows = i
    print("[INFO] Rows affected:", gmRows)






    # ------ INSERT ORDES ------

    ORDER_LIMIT=300
    filepath = dir+"order_dates.csv"
    print("----------------------------------------------------")
    with open(filepath) as file:
        i = 0
        randC = random.randint(1, clientRows-1)

        content = csv.reader(file, delimiter=';')
        for line in content:
            if i > ORDER_LIMIT: 
                break 
            randProd = random.randint(0, len(productBuffer)-1)

            randMill = random.randint(1, 9)*1000
            randHund = random.randint(1, 9)*100
            randTens = random.randint(1, 9)*10
            quantity = randMill + randHund + randTens

            randC = random.randint(1, clientRows-1)

            cursor.execute( 
                f"INSERT INTO Orders (ID_product, ID_client, Order_date, Quantity) " + 
                f"VALUES ('{productBuffer[randProd]}', " +  # Product_ID
                f"'{randC}', " +  # Client_ID
                f"STR_TO_DATE('{line[0]}', '%Y-%m-%d'), " +  # Date
                f"'{quantity}');"  # Quantity (int)
            )
            print(f"[INFO] {i} records inserted into table Orders ({productBuffer[randProd]}, {randC}, {line[0]}, {quantity})" )
            i +=1
            conn.commit()
    print(f"[INFO]Limited to {ORDER_LIMIT} rows")
    ordersRows = i
    print("[INFO] Rows affected:", ordersRows)



except Error as e: 
    print("[ERROR]Exception caught:", e)

finally: 
    cursor.close()
    conn.close()

    stop_time = time.time()
    print(f"\n[INFO] === DB setup complete ===")

    def elapsed_seconds_conversion(sec):
        sec_value = sec % (24 * 3600)
        hour_value = sec_value // 3600
        sec_value %= 3600
        min = sec_value // 60
        sec_value = round((sec_value % 60), 0)
        print(f"[INFO] Elapsed time in 'db_import.py': {hour_value} h / {min} min / {sec_value} sec")
    elapsed_seconds_conversion(stop_time-start_time)
